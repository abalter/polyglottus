Import KernelManager as km

### Create some kernels
python1 = km.Kernel(language=’Python’)
bash1 = km.Kernel(language=’bash’)
R1 = km.Kernel(language=’R’)

### Start the kernels
python1.start()
bash1.start()
R1.start()

### Run command and print the output
cmd = """
import numpy as np
x = np.array([2.3,-4.5,10.01])
x.mean()
"""
print(python1.run())
# >>> 2.6033333333333331

### Import x into the R1 kernel
### Default mapping is np.array to R array
R1.import(python1.namespace(x))
R1.run("m = mean(x)")

### Import m into python1 kernel
### Default mapping float to float
python1.import(R1.namespace('m'))
out = python2.run("print(m)")

### Here in main python script, print stdout from last run
print(out)
### >>> 2.60333333

### Run a command in python1
cmd = """
a=10
b=20
"""
python1.run(cmd)

### Import the variables into bash1
### Default mapping as if defined in bash
### For example "a=10" or "c=hello"
bash1.import(python1.namespace(['a', 'b']))
cmd = """
echo \"this is displayed\"
echo \"a + b = $(($1+$2))\"
"""
out = bash1.run(cmd)

### The variable out contains the entire stdout of the last run
print(out)
# >>> this is displayed
# >>> a + b = 30

### Run a command in a bash kernel
cmd = """awk 'NR==1{print "A","D","E"}NR>3&&NR%2==0{print $1,$4,$2*$3}' data.txt > new_data.txt"""
out = bash1.run(cmd)

### Create a DataFrame in a python kernel
cmd = """
import pandas as pd
df = pd.read_csv("new_data.txt", sep="\t")
"""
out = python1.run(cmd)

### Import the DataFrame into an R kernel
### Default mapping is Pandas DataFrame to R data.table
R1.import(python1.namespace('df'))

### Run command in R kernel
cmd="""
install.packages("ggplot2", repos='http://cran.us.r-project.org', quiet=TRUE)
library(ggplot2)
ggplot(data=df, aes(x=A, y=D, color=C)) + geom_line()
"""
out = R1.run(cmd)

### What should happen with the plot?




















df = pd.DataFrame({'Alphabet': ['a', 'b', 'c', 'd','e', 'f', 'g', 'h','i'],
                   'A': [4, 3, 5, 2, 1, 7, 7, 5, 9],
                   'B': [0, 4, 3, 6, 7, 10,11, 9, 13],
                   'C': [1, 2, 3, 1, 2, 3, 1, 2, 3]})
# Take the name of input variable df and assign it to an R variable of the same name
%%R -i df
# Plot the DataFrame df
ggplot(data=df) + geom_point(aes(x=A, y=B, color=C))









import pandas as pd
df = pd.DataFrame({
    'cups_of_coffee': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
    'productivity': [2, 5, 6, 8, 9, 8, 0, 1, 0, -1]
})

# import df from global environment
# make default figure size 5 by 5 inches with 200 dpi resolution
%%R -i df -w 5 -h 5 --units in -r 200
install.packages("ggplot2", repos='http://cran.us.r-project.org', quiet=TRUE)
library(ggplot2)
ggplot(df, aes(x=cups_of_coffee, y=productivity)) + geom_line()


# Hide warnings if there are any
import warnings
warnings.filterwarnings('ignore')
# Load in the r magic
%load_ext rpy2.ipython
# We need ggplot2
%R require(ggplot2)
# Load in the pandas library
import pandas as pd
# Make a pandas DataFrame
df = pd.DataFrame({'Alphabet': ['a', 'b', 'c', 'd','e', 'f', 'g', 'h','i'],
                   'A': [4, 3, 5, 2, 1, 7, 7, 5, 9],
                   'B': [0, 4, 3, 6, 7, 10,11, 9, 13],
                   'C': [1, 2, 3, 1, 2, 3, 1, 2, 3]})
# Take the name of input variable df and assign it to an R variable of the same name
%%R -i df
# Plot the DataFrame df
ggplot(data=df) + geom_point(aes(x=A, y=B, color=C))






import numpy as np
x = np.array([2.3,-4.5,10.01])
x.mean()

%%R -i x -o m
m = mean(x)

print(m)


a=10
b=20

%%bash -s $a $b --out c
echo "this is displayed"
echo "the last thing printed to stdout will be passed back in the variable c"
echo "a + b = $(($1+$2))"

print(c)


In [1]:
%load_ext rpy2.ipython
In [2]:
a = !echo "hello"
print(a)
['hello']
In [3]:
import numpy as np
x = np.array([2.3,-4.5,10.01])
x.mean()
Out[3]:
2.6033333333333331
In [4]:
%%R -i x -o m
m = mean(x)
In [5]:
print(m)
[ 2.60333333]
In [50]:
a=10
b=20
In [51]:
%%bash -s $a $b --out c
echo "this is displayed"
echo "the last thing printed to stdout will be passed back in the variable c"
echo "a + b = $(($1+$2))"
In [52]:
print(c)
this is displayed
the last thing printed to stdout will be passed back in the variable c
a + b = 30

In [ ]:




>>> df = pd.read_csv(StringIO("A,B,C\n1,2,3\n4,5,6"))
>>> df
   A  B  C
0  1  2  3
1  4  5  6
>>>







https://github.com/michhar/rpy2_sample_notebooks
https://stackoverflow.com/questions/39008069/r-and-python-in-one-jupyter-notebook
https://www.datacamp.com/community/blog/jupyter-notebook-r
